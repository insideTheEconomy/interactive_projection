{
  "name": "seedrandom",
  "version": "2.3.1",
  "description": "Seeded random number generator for Javascript.",
  "main": "seedrandom.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/davidbau/seedrandom.git"
  },
  "author": {
    "name": "David Bau"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/davidbau/seedrandom/issues"
  },
  "homepage": "https://github.com/davidbau/seedrandom",
  "devDependencies": {
    "grunt": "0.4.2",
    "grunt-bowercopy": "0.4.1",
    "grunt-cli": "0.1.11",
    "grunt-contrib-uglify": "0.2.7",
    "grunt-contrib-qunit": "0.3.0",
    "grunt-release": "0.6.0",
    "phantomjs": "1.9.2-6"
  },
  "readme": "seedrandom.js\n=============\n\nSeeded random number generator for Javascript.\n\nversion 2.3.\n\nDate: 2013 Dec 22\n\nDefines a method Math.seedrandom() that, when called, substitutes\nan explicitly seeded RC4-based algorithm for Math.random().  Also\nsupports automatic seeding from local or network sources of entropy.\nCan be used as a node.js or AMD module.  Can be called with \"new\"\nto create a local PRNG without changing Math.random.\n\nUsage:\n\n<pre>\n&lt;script src=http://davidbau.com/encode/seedrandom-min.js&gt;&lt;/script&gt;\n\nMath.seedrandom('yay.');  Sets Math.random to a function that is\n                          initialized using the given explicit seed.\n\nMath.seedrandom();        Sets Math.random to a function that is\n                          seeded using the current time, dom state,\n                          and other accumulated local entropy.\n                          The generated seed string is returned.\n\nMath.seedrandom('yowza.', true);\n                          Seeds using the given explicit seed mixed\n                          together with accumulated entropy.\n\nvar myrng = new Math.seedrandom('yay.');\nvar n = myrng();          Using \"new\" creates a local prng without\n                          altering Math.random.\n\n&lt;script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\"&gt;\n&lt;/script&gt;                 Seeds using urandom bits from a server.\n\nMath.seedrandom(\"hello.\");           // Behavior is the same everywhere:\ndocument.write(Math.random());       // Always 0.9282578795792454\ndocument.write(Math.random());       // Always 0.3752569768646784\n</pre>\n\nWhen used as a module, also returns local PRNG instances:\n\n<pre>\n// With node.js:\nvar seedrandom = require('./seedrandom.js');\nvar rng = seedrandom('predictable.');\nconsole.log(rng());                  // always 0.6646563869134212\n\n// With require.js or other AMD loader:\nrequire(['seedrandom'], function(seedrandom) {\n  var rng = seedrandom('predictable.');\n  console.log(rng());                // always 0.6646563869134212\n});\n</pre>\n\nMore examples:\n\n<pre>\nvar seed = Math.seedrandom();        // Use prng with an automatic seed.\ndocument.write(Math.random());       // Pretty much unpredictable x.\n\nvar rng = new Math.seedrandom(seed); // A new prng with the same seed.\ndocument.write(rng());               // Repeat the 'unpredictable' x.\n\nfunction reseed(event, count) {      // Define a custom entropy collector.\n  var t = [];\n  function w(e) {\n    t.push([e.pageX, e.pageY, +new Date]);\n    if (t.length &lt; count) { return; }\n    document.removeEventListener(event, w);\n    Math.seedrandom(t, true);        // Mix in any previous entropy.\n  }\n  document.addEventListener(event, w);\n}\nreseed('mousemove', 100);            // Reseed after 100 mouse moves.\n\nThe callback third arg can be used to get both the prng and the seed.\nThe following returns both an autoseeded prng and the seed as an object,\nwithout mutating Math.random:\n\nvar obj = Math.seedrandom(null, false, function(prng, seed) {\n  return { random: prng, seed: seed };\n});\n</pre>\n\nVersion notes:\n\nThe random number sequence is the same as version 1.0 for string seeds.\nVersion 2.0 changed the sequence for non-string seeds.\nVersion 2.1 speeds seeding and uses window.crypto to autoseed if present.\nVersion 2.2 alters non-crypto autoseeding to sweep up entropy from plugins.\nVersion 2.3 adds support for \"new\", module loading, and a null seed arg.\nVersion 2.3.1 adds a build environment, module packaging, and tests.\n\nThe standard ARC4 key scheduler cycles short keys, which means that\nseedrandom('ab') is equivalent to seedrandom('abab') and 'ababab'.\nTherefore it is a good idea to add a terminator to avoid trivial\nequivalences on short string seeds, e.g., Math.seedrandom(str + '\\0').\nStarting with version 2.0, a terminator is added automatically for\nnon-string seeds, so seeding with the number 111 is the same as seeding\nwith '111\\0'.\n\nWhen seedrandom() is called with zero args or a null seed, it uses a\nseed drawn from the browser crypto object if present.  If there is no\ncrypto support, seedrandom() uses the current time, the native rng,\nand a walk of several DOM objects to collect a few bits of entropy.\n\nEach time the one- or two-argument forms of seedrandom are called,\nentropy from the passed seed is accumulated in a pool to help generate\nfuture seeds for the zero- and two-argument forms of seedrandom.\n\nOn speed - This javascript implementation of Math.random() is several\ntimes slower than the built-in Math.random() because it is not native\ncode, but that is typically fast enough.  Some details (timings on\nChrome 25 on a 2010 vintage macbook):\n\nseeded Math.random()          - avg less than 0.0002 milliseconds per call\nseedrandom('explicit.')       - avg less than 0.2 milliseconds per call\nseedrandom('explicit.', true) - avg less than 0.2 milliseconds per call\nseedrandom() with crypto      - avg less than 0.2 milliseconds per call\n\nAutoseeding without crypto is somewhat slower, about 20-30 milliseconds on\na 2012 windows 7 1.5ghz i5 laptop, as seen on Firefox 19, IE 10, and Opera.\nSeeded rng calls themselves are fast across these browsers, with slowest\nnumbers on Opera at about 0.0005 ms per seeded Math.random().\n\nLICENSE (BSD):\n\nCopyright 2013 David Bau, all rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  1. Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n\n  3. Neither the name of this module nor the names of its contributors may\n     be used to endorse or promote products derived from this software\n     without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n",
  "readmeFilename": "README.md",
  "_id": "seedrandom@2.3.1",
  "dist": {
    "shasum": "e4da66ebcfdab6a35690ed80c3146676b2df0ff8"
  },
  "_from": "seedrandom@2.3.1",
  "_resolved": "https://registry.npmjs.org/seedrandom/-/seedrandom-2.3.1.tgz"
}
